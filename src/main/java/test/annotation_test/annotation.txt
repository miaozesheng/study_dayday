注解概述,作用:
    注解是jdk1.5引入的一种注释机制
    java语言中的类 构造器 方法 成员变量 参数等都可以被注解进行标注 然后进行特殊处理

例如:在junit框架中,@Test注解标记的方法就会被当成测试方法执行,而没有标记的就不能当成测试方法执行

元注解:就是注解注解的注解(用来注释注解的注解)
    @Target 约束自定义注解只能在那些地方使用
        比如开头说过的,一个注解其实可以在类 构造器 方法 成员变量 参数上进行标注,@target则可以约束某个注解可以被使用在那些地方上边

        Target元注解值定义中常用之如下 定义的是该注解可以被用在哪些地方 定义在ElementType枚举类中
                TYPE 类和接口上
                FIELD 成员变量上
                METHOD 成员方法上
                PARAMETER 方法参数上
                CONSTRUCTOR 构造器上
                LOCAL_VARIABLE 局部变量上

    @Retention 声明注解的生命周期
        好多注解都是在编译阶段起效果 运行阶段就没了,这个注解可以控制注解的生命周期

         Retention中可使用的指定以在RetentionPolicy的枚举类中,定义的是该注解可以被用在什么时候 常用值如下:
                SOURCE 注解只作用在源码阶段,生成的字节码文件中不存在
                CLASS 注解只作用在源码和字节码文件阶段 运行期间不存在 也是该元注解使用的默认值
                RUNTIME 注解作用总源码 字节码文件 及运行阶段(开发常用)

注解的解析:
    注解的操作中,经常需要进行解析,注解的解析就是判断是否存在注解,如果存在注解就解析出内容

    注解解析相关的接口:
        Annotation 注解的顶级接口 注解都是Annotation类型的对象
            我们可以理解为我们写的每一个注解都是一个Annotation的实例化对象
        AnnotatedElement 该接口定义了与注解解析相关的解析方法

    所有的类成分 Class Method Field Constructor都实现了AnnotatedElement接口 他们都拥有解析注解的能力

    解析注解的技巧:
        1.注解在哪个成分上,我们就先拿哪个成分对象
        2.比如注解作用成员方法,则要获取该成员方法对应的Method对象,再来拿上边的注解
        3.比如注解作用在类上,则要该类的Class对象 再来拿上边的注解
        4.比如注解作用在成员变量上,则要获得该成员变量对应的Field对象,再来拿上面的注解

注解的应用场景:模拟Junit框架
    1.定义若干个方法,只要加了MyTestTwo注解,就可以在启动时被触发 没有这个注解该方法不能执行
    2.定义一个自定义注解MyTestTwo注解,只能注解方法 存活范围是一直都在